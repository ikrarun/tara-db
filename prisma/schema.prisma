generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Quotes {
  id     String  @id @default(cuid())
  quote  String  @unique
  author String? @default("")
}

model Suggestedreadings {
  id          String   @id @default(cuid())
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  title       String   @unique @default("")
  desc        String
  link        String
  imageUrl    String
  suggestedby String
}

model Articles {
  id         String   @id @default(cuid())
  title      String   @unique
  short_desc String
  approved   Boolean?
  creator    String?
  wysiwyg    String
  tags       String   @default("")
  date       DateTime @default(dbgenerated("(now() AT TIME ZONE 'utc-5:30'::text)")) @db.Timestamptz(6)
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  role          Role         @default(USER)
  accounts      Account[]
  sessions      Session[]
  UserProfile   UserProfile?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserProfile {
  id      String @id @default(cuid())
  userId  String @unique
  phone   String @unique
  state   String
  pincode Int
  address String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

enum Role {
  USER
  ADMIN
  EDITOR
  BANNED
}
